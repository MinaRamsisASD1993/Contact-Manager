{"version":3,"sources":["context.js","components/Contact.js","components/Contacts.js","components/Header.js","components/TextInput.js","components/AddContact.js","components/About.js","components/NotFound.js","components/updateContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","push","_action$payload","name","email","phone","forEach","Provider","dispatch","_this","setState","axios","get","res","this","data","react_default","a","createElement","value","props","children","Component","Consumer","Contact","showUL","arrowOnClick","onDeleteClick","contactId","deleteRequest","delete","concat","ULcontent","_this2","deleteIconStyle","float","color","cursor","updateIconStyle","className","style","fontSize","onClick","bind","Link","to","Contacts","map","components_Contact","key","Header","branding","defaultProps","TextInput","label","onChange","htmlFor","required","AddContact","e","defineProperty","target","onSubmit","_callee","globalState","_this$state","newContact","regenerator_default","wrap","_context","prev","next","preventDefault","post","sent","history","stop","components_TextInput","About","NotFound","UpdateContact","onUpdateClick","match","params","console","log","put","App","context","HashRouter","components_Header","Switch","Route","path","exact","component","updateContact","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.578144e0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nconst Context = React.createContext();\r\n\r\n//reducer takes in (init state, actionToDo) .. and it's called by dispatch in the state\r\n//action is like this -> {type: \"ADD_CONTACT\", payload: {Entire Contact}}\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\": {\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payload\r\n          // action.payload is contactId\r\n        )\r\n      };\r\n    }\r\n    case \"ADD_CONTACT\": {\r\n      const contacts = state.contacts;\r\n      contacts.push(action.payload);\r\n      return {\r\n        ...state,\r\n        contacts: contacts\r\n        // You can also do this\r\n        // contacts: [...state.contacts, action.payload] :)\r\n      };\r\n    }\r\n    case \"UPDATE_CONTACT\": {\r\n      const contacts = state.contacts;\r\n      //action.payload = {name: , email: ,phone: , id: }\r\n      const { name, email, phone, id } = action.payload;\r\n      contacts.forEach(contact => {\r\n        if (contact.id === id) {\r\n          contact.name = name;\r\n          contact.email = email;\r\n          contact.phone = phone;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        contacts: contacts\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nclass Provider extends Component {\r\n  // componentDidMount() {\r\n  //   //Good place for grabbing data from external API\r\n  //  //Good place for setting state to new state\r\n  //   axios\r\n  //     .get(\"https://jsonplaceholder.typicode.com/users\")\r\n  //     .then(res => this.setState({ contacts: res.data }));\r\n  // }\r\n  async componentDidMount() {\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n    this.setState({ contacts: res.data });\r\n  }\r\n\r\n  state = {\r\n    contacts: [],\r\n\r\n    dispatch: action => {\r\n      this.setState(state => reducer(state, action));\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n//Any component that's gonna use this Context is gonna use its Consumer\r\nexport const Consumer = Context.Consumer;\r\n//This Provider class is gonna wrap all of you components to be a global state\r\nexport default Provider;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"../context\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Contact extends Component {\r\n  state = {\r\n    showUL: false\r\n  };\r\n  arrowOnClick = () => {\r\n    this.setState({ showUL: !this.state.showUL });\r\n  };\r\n  async deleteRequest(contactId, state) {\r\n    //Very good move ..\r\n    //By default you cannot delete key 11 as it doesn't exist there\r\n    //so we'll wrap it in a try catch\r\n    try {\r\n      await axios.delete(\r\n        `https://jsonplaceholder.typicode.com/users/${contactId}`\r\n      );\r\n      state.dispatch({ type: \"DELETE_CONTACT\", payload: contactId });\r\n    } catch (e) {\r\n      state.dispatch({ type: \"DELETE_CONTACT\", payload: contactId });\r\n    }\r\n  }\r\n\r\n  onDeleteClick = (contactId, state) => {\r\n    this.deleteRequest(contactId, state);\r\n    // axios\r\n    //   .delete(`https://jsonplaceholder.typicode.com/users/${contactId}`)\r\n    //   .then(() =>\r\n    //     state.dispatch({ type: \"DELETE_CONTACT\", payload: contactId })\r\n    //   );\r\n  };\r\n\r\n  render() {\r\n    const { contact } = this.props;\r\n    const { name, email, phone } = contact;\r\n    const deleteIconStyle = { float: \"right\", color: \"red\", cursor: \"pointer\" };\r\n    const updateIconStyle = { float: \"right\", cursor: \"pointer\" };\r\n    let ULcontent;\r\n    if (this.state.showUL) {\r\n      ULcontent = (\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email: {email}</li>\r\n          <li className=\"list-group-item\">Phone: {phone}</li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      ULcontent = null;\r\n    }\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          // console.log(value);\r\n          return (\r\n            <div className=\"card my-3\">\r\n              <div className=\"card-body\">\r\n                <h3 className=\"card-title\">\r\n                  {name}{\" \"}\r\n                  <i\r\n                    className=\"fa fa-caret-down\"\r\n                    style={{ fontSize: \"24px\", cursor: \"pointer\" }}\r\n                    onClick={this.arrowOnClick}\r\n                    //   .bind (this) -> gives the function accessibility to use this :)\r\n                    //.. but even you can use this inside function by using an arrow function\r\n                  />\r\n                  <i\r\n                    className=\"fa fa-trash\"\r\n                    style={deleteIconStyle}\r\n                    onClick={this.onDeleteClick.bind(this, contact.id, value)}\r\n                  />\r\n                  <Link to={`/contact/update/${contact.id}`}>\r\n                    <i className=\"fa fa-pencil mr-3\" style={updateIconStyle} />\r\n                    {\"  \"}\r\n                  </Link>\r\n                </h3>\r\n                {ULcontent}\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired\r\n};\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"../components/Contact\";\r\nimport { Consumer } from \"../context\";\r\nclass Contacts extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value;\r\n          return (\r\n            <div>\r\n              <h1 className=\"display-3 my-4\">\r\n                <span style={{ color: \"red\" }}>Contact</span> List\r\n              </h1>\r\n              {contacts.map(contact => (\r\n                <Contact key={contact.id} contact={contact} />\r\n              ))}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction Header(props) {\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      {/* <h1>Contact List</h1> */}\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-4\">\r\n        <div className=\"container\">\r\n          <Link to=\"/\" className=\"navbar-brand\">\r\n            {branding}\r\n          </Link>\r\n          <div>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  <i className=\"fa fa-home\" /> Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/contact/add\" className=\"nav-link\">\r\n                  <i className=\"fa fa-plus\" /> Add Contact\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/about\" className=\"nav-link\">\r\n                  <i className=\"fa fa-question\" /> About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\nHeader.defaultProps = {\r\n  branding: \"Contact List\"\r\n};\r\n\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction TextInput(props) {\r\n  const { label, type, value, id, onChange } = props;\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={id}>{label}</label>\r\n      <input\r\n        type={type}\r\n        className=\"form-control\"\r\n        value={value}\r\n        id={id}\r\n        onChange={onChange}\r\n        required\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../context\";\r\n// import uuid from \"uuid\";\r\nimport TextInput from \"./TextInput\";\r\nimport axios from \"axios\";\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\"\r\n  };\r\n  onChange = e => {\r\n    // console.log(\"changing\");\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n  onSubmit = async (globalState, e) => {\r\n    e.preventDefault();\r\n    // console.log(this.state);\r\n    const { name, email, phone } = this.state;\r\n    const newContact = {\r\n      name: name,\r\n      email: email,\r\n      phone: phone\r\n    };\r\n    const res = await axios.post(\r\n      \"https://jsonplaceholder.typicode.com/users\",\r\n      newContact\r\n    );\r\n    globalState.dispatch({ type: \"ADD_CONTACT\", payload: res.data });\r\n\r\n    // axios\r\n    //   .post(\"https://jsonplaceholder.typicode.com/users\", newContact)\r\n    //   .then(res => {\r\n    //     const { id, name, email, phone } = res.data;\r\n    //     const newContactToAdd = {\r\n    //       id,\r\n    //       name,\r\n    //       email,\r\n    //       phone\r\n    //     };\r\n    //     globalState.dispatch({ type: \"ADD_CONTACT\", payload: newContactToAdd });\r\n    //   });\r\n\r\n    this.setState({ name: \"\", email: \"\", phone: \"\" });\r\n\r\n    //After submission redirect to home page\r\n    this.props.history.push(\"/\");\r\n  };\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          return (\r\n            <div className=\"card my-3\">\r\n              <h5 className=\"card-header\">Add Contact</h5>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, value)}>\r\n                  <TextInput\r\n                    label=\"Name\"\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInput\r\n                    label=\"Email\"\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInput\r\n                    label=\"Phone\"\r\n                    id=\"phone\"\r\n                    type=\"text\"\r\n                    value={this.state.phone}\r\n                    onChange={this.onChange}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary\"\r\n                    value=\"Add Contact\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","import React from \"react\";\r\n\r\nfunction About(props) {\r\n  return (\r\n    <div>\r\n      {/* For getting the parameter sent as :id along with the path */}\r\n      {/* i mean if the path is =\"/about/:id\" */}\r\n      {/* <h2>{props.match.params.id}</h2>  */}\r\n      <h1 className=\"display-4\">About Page</h1>\r\n      <p className=\"lead\">Simple App to manage contacts</p>\r\n      <p className=\"text-secondary\">version 1.0.0</p>\r\n    </div>\r\n  );\r\n}\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        <span className=\"text-danger\">404</span> Page Not Found\r\n      </h1>\r\n      <p className=\"lead\">Sorry, that page doesn't exist</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../context\";\r\nimport TextInput from \"./TextInput\";\r\nimport axios from \"axios\";\r\nclass UpdateContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\"\r\n  };\r\n  onChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n  onUpdateClick = async (globalState, e) => {\r\n    const id = this.props.match.params.id;\r\n    console.log(id);\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n    const newContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n\r\n    const res = await axios.put(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`,\r\n      newContact\r\n    );\r\n    globalState.dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n    // // console.log(res.data);\r\n    // globalState.dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n    this.setState({ name: \"\", email: \"\", phone: \"\" });\r\n\r\n    //After submission redirect to home page\r\n    this.props.history.push(\"/\");\r\n  };\r\n  async componentDidMount() {\r\n    //   //Good place for grabbing data from external API\r\n    //  //Good place for setting state to new state\r\n    const id = this.props.match.params.id;\r\n    // console.log(id);\r\n    const res = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`\r\n    );\r\n    // console.log(res.data);\r\n    const { name, email, phone } = res.data;\r\n    this.setState({\r\n      name,\r\n      email,\r\n      phone\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          //   console.log(value.contacts);\r\n\r\n          return (\r\n            <div className=\"card my-3\">\r\n              <h5 className=\"card-header\">Update Contact</h5>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onUpdateClick.bind(this, value)}>\r\n                  <TextInput\r\n                    label=\"Name\"\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInput\r\n                    label=\"Email\"\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInput\r\n                    label=\"Phone\"\r\n                    id=\"phone\"\r\n                    type=\"text\"\r\n                    value={this.state.phone}\r\n                    onChange={this.onChange}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary\"\r\n                    value=\"Update Contact\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UpdateContact;\r\n","import React, { Component } from \"react\";\nimport Contacts from \"./components/Contacts\";\nimport Provider from \"./context\";\nimport Header from \"./components/Header\";\nimport AddContact from \"./components/AddContact\";\nimport About from \"./components/About\";\nimport NotFound from \"./components/NotFound\";\nimport updateContact from \"./components/updateContact\";\n// import Test from \"./components/Tests/Test\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header />\n            <div className=\"container\">\n              <Switch>\n                {/* <AddContact /> */}\n                <Route path=\"/contact/add\" exact component={AddContact} />\n                {/* <Contacts /> */}\n                <Route path=\"/\" exact component={Contacts} />\n                <Route path=\"/about\" component={About} />\n                <Route path=\"/contact/update/:id\" component={updateContact} />\n                {/* <Route path=\"/test\" component={Test} /> */}\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}